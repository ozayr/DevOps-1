version: 2.1

orbs:
  slack: circleci/slack@3.4.2

# commands:
#   slack-notify:  
#     steps:
#       - slack/notify:
#           color: "#42e2f4"
#           mentions: "ozayr,"
#           message: just a message
#           fail_only: true

jobs:
# =========================================================================================================
# BUILD
  backend_build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - back-end
  
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
          
      - save_cache:
          paths:
            - backend/node_modules 
          key: back-end

  frontend_build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - front-end

      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
          
      - save_cache:
          paths:
            - frontend/node_modules
          key: front-end
  
# =======================================================================================================
# TEST
  backend_tests:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - back-end
     
      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd backend
            npm add --dev jest-junit
            npm run test --reporters=jest-junit
     
      - store_test_results:
          path: backend/test-results
      - store_artifacts:
          path: backend/test-results/junit/junit.xml
    
            
      - save_cache:
          paths:
            - backend/node_modules 
          key: back-end

  frontend_tests:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - front-end

      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd frontend
            npm add --dev jest-junit
            npm run test --reporters=jest-junit
      
      - store_test_results:
          path: frontend/test-results
      - store_artifacts:
          path: frontend/test-results/junit/junit.xml
          
      - save_cache:
          paths:
            - frontend/node_modules  
          key: front-end

      - slack/status:
          channel: cicd-pipeline
          mentions: "ozayr,"
          fail_only: true
          
# =========================================================================================================
# ANALYZE
  audit-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - back-end
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm audit --audit-level=critical


  audit-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - front-end
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm audit --audit-level=critical

# =================================================================================================
# INFRASTRUCTURE 


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create backend infrastructure 
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}"
            
      - run:
          name: create frontend infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: get public IP of EC2 instance created
          command: |
            echo "[all]" > inventory
            aws cloudformation describe-stacks --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[?OutputKey==\`DNSName\`].OutputValue" --output text >> inventory
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: ./
          paths:
            - ./inventory


  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [4b:f1:26:7f:1d:41:42:74:00:af:56:b0:10:e8:b0:e8]
      - checkout
      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run:
          name: Install ansible
          command: | 
            apk add --update ansible 
      - run: 
          name: Configure server using ansible playbook
          command: ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory .circleci/ansible/configure.yml
      - destroy_backend_stack


workflows:
  default:
    jobs:
      - backend_build
      - frontend_build
      
      - backend_tests:
          requires: 
            - backend_build
      - frontend_tests:
          requires: 
            - frontend_build

      - audit-backend:
          requires:
            - backend_tests
      - audit-frontend:
          requires:
            - frontend_tests

      - deploy-infrastructure:
          requires:
            - audit-backend
            - audit-frontend

      



             

